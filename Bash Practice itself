####  Bash Practice:
https://medium.com/aimonks/50-cool-bash-scripts-and-what-they-do-b38b4e841ba2

### Hello World: 

> #!/bin/bash
echo "Hello, World!"

### File Backup

> #!/bin/bash
source_dir="/path/to/source"
backup_dir="/path/to/backup"
timestamp=$(date +%Y%m%d%H%M%S)
backup_file="backup_$timestamp.tar.gz"
tar -czvf "$backup_dir/$backup_file" "$source_dir"

### Directory Listing

> #!/bin/bash
ls -l

### File Count

> #!/bin/bash
file_count=$(ls | wc -l)
echo "Number of files: $file_count"


### Disk Usage

> #!/bin/bash
df -h

### System Info

> #!/bin/bash
uname -a

### File Rename

> #!/bin/bash
old_name="old.txt"
new_name="new.txt"
mv "$old_name" "$new_name"

###  File Permissions

> #!/bin/bash
file="file.txt"
chmod +x "$file"

### User Info

> #!/bin/bash
username=$(whoami)
echo "Current user: $username"

### Process List

> #!/bin/bash
ps aux

### Process Kill

> #!/bin/bash
process_id=12345
kill -9 "$process_id"

### Check Internet Connection

> #!/bin/bash
ping -c 5 google.com

### Disk Cleanup

> #!/bin/bash
du -sh /var/log/*
rm -rf /var/log/*

### System Shutdown

> #!/bin/bash
shutdown -h now

### System Reboot

> #!/bin/bash
reboot

### File Search

> #!/bin/bash
search_dir="/path/to/search"
search_term="pattern"
grep -r "$search_term" "$search_dir"

### Disk Space Alert

> #!/bin/bash
threshold=90
current_usage=$(df -h / | awk 'NR==2 {print $5}' | tr -d '%')
if [ "$current_usage" -ge "$threshold" ]; then
    echo "Disk space is running low!"
else
    echo "Disk space is okay."
fi

### Check Service Status

> #!/bin/bash
service_name="nginx"
if systemctl is-active --quiet "$service_name"; then
    echo "$service_name is running."
else
    echo "$service_name is not running."
f

### System Backup Script

> #!/bin/bash
source_dir="/path/to/source"
backup_dir="/path/to/backup"
timestamp=$(date +%Y%m%d%H%M%S)
backup_file="backup_$timestamp.tar.gz"
tar -czvf "$backup_dir/$backup_file" "$source_dir"

### Log Rotation

> #!/bin/bash
log_file="/path/to/logfile.log"
max_log_size=10M
if [ -f "$log_file" ]; then
    current_size=$(du -b "$log_file" | awk '{print $1}')
    if [ "$current_size" -ge "$max_log_size" ]; then
        mv "$log_file" "$log_file.old"
        touch "$log_file"
    fi
fi

### User Management

> #!/bin/bash
username="newuser"
password="password123"
useradd "$username"
echo "$username:$password" | chpasswd

### File Encryption

> #!/bin/bash
file_to_encrypt="file.txt"
gpg -c "$file_to_encrypt"

### File Decryption

> #!/bin/bash
encrypted_file="file.txt.gpg"
gpg -d "$encrypted_file" > "decrypted_file.txt"

### File Compression

> #!/bin/bash
compressed_file="compressed_file.tar.gz"
tar -xzvf "$compressed_file"

###  File Decompression

> #!/bin/bash
compressed_file="compressed_file.tar.gz"
tar -xzvf "$compressed_file"

### CSV File Processing

> #!/bin/bash
input_csv="data.csv"
output_file="output.txt"
awk -F ',' '{print $1,$2}' "$input_csv" > "$output_file"

### Log Analysis

> #!/bin/bash
log_file="access.log"
unique_ips=$(awk '{print $1}' "$log_file" | sort -u | wc -l)
error_count=$(grep -c 'ERROR' "$log_file")
echo "Unique IPs: $unique_ips"
echo "Total Errors: $error_count"

### Send Email Alert

> #!/bin/bash
email="user@example.com"
subject="Alert"
message="Disk space is running low!"
echo "$message" | mail -s "$subject" "$email"

### Database Backup

> #!/bin/bash
db_name="mydb"
backup_file="backup.sql"
mysqldump -u username -p$password "$db_name" > "$backup_file"

### SSH Key Generation

> #!/bin/bash
ssh-keygen -t rsa -b 4096 -f ~/.ssh/mykey

### SSH Key Copy

> #!/bin/bash
ssh-copy-id user@hostname

### File Comparison

> #!/bin/bash
file1="file1.txt"
file2="file2.txt"
if cmp -s "$file1" "$file2"; then
    echo "Files are identical."
else
    echo "Files are different."
fi

### Cron Job Example

> #!/bin/bash
backup_dir="/path/to/backup"
timestamp=$(date +%Y%m%d%H%M%S)
backup_file="backup_$timestamp.tar.gz"
tar -czvf "$backup_dir/$backup_file" /path/to/source

### Folder Synchronization

> #!/bin/bash
source_dir="/path/to/source"
destination_dir="/path/to/destination"
rsync -av "$source_dir/" "$destination_dir/"

### URL Download

> #!/bin/bash
url="https://example.com/file.txt"
output_file="downloaded_file.txt"
wget "$url" -O "$output_file"

### Input Validation

> #!/bin/bash
read -p "Enter a number: " number
if [[ ! "$number" =~ ^[0-9]+$ ]]; then
    echo "Invalid input. Please enter a number."
else
    echo "You entered: $number"
fi

### String Manipulation

> #!/bin/bash
string="Hello, World!"
uppercase_string=$(echo "$string" | tr '[:lower:]' '[:upper:]')
echo "$uppercase_string"

### File Watcher

> #!/bin/bash
directory="/path/to/watch"
inotifywait -m -r -e create,modify,delete "$directory" |
while read path action file; do
    echo "File $file was $action."
done

### JSON Parsing

> #!/bin/bash
json_string='{"name": "John", "age": 30}'
name=$(echo "$json_string" | jq -r '.name')
age=$(echo "$json_string" | jq -r '.age')
echo "Name: $name, Age: $age"

### Zip File Compression

> #!/bin/bash
file_to_compress="file.txt"
zip "compressed_file.zip" "$file_to_compress"

### Zip File Extraction

> #!/bin/bash
zip_file="compressed_file.zip"
unzip "$zip_file"

### PDF Conversion

> #!/bin/bash
input_file="document.docx"
output_file="document.pdf"
libreoffice --headless --convert-to pdf "$input_file"

### CSV to Excel

> #!/bin/bash
input_csv="data.csv"
output_xlsx="data.xlsx"
ssconvert "$input_csv" "$output_xlsx"

### File Splitting

> #!/bin/bash
input_file="large_file.txt"
split -b 1M "$input_file" "split_file"


### File Joining

> #!/bin/bash
cat split_file* > "large_file.txt"

### IP Address Validation

> #!/bin/bash
read -p "Enter an IP address: " ip_address
if [[ $ip_address =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "Valid IP address: $ip_address"
else
    echo "Invalid IP address."
fi

### URL Validation

> #!/bin/bash
read -p "Enter a URL: " url
if [[ $url =~ ^(http|https)://[A-Za-z0-9.-/]+$ ]]; then
    echo "Valid URL: $url"
else
    echo "Invalid URL."
fi

### File Permissions Report

> #!/bin/bash
find /path/to/files -type f -exec ls -l {} \; > permissions_report.txt

### Password Generator

> #!/bin/bash
length=12
characters="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()"
password=$(head /dev/urandom | tr -dc "$characters" | head -c "$length")
echo "Generated Password: $password"





